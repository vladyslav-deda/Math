// Generated by Dagger (https://dagger.dev).
package com.example.data.firebase_users_db.di;

import com.example.domain.firebase_users_db.FirebaseUsersDbRepository;
import com.example.domain.firebase_users_db.usecase.AuthUserUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class FirebaseUsersDbModule_ProvideAuthUserUseCaseFactory implements Factory<AuthUserUseCase> {
  private final Provider<FirebaseUsersDbRepository> firebaseUsersDbRepositoryProvider;

  public FirebaseUsersDbModule_ProvideAuthUserUseCaseFactory(
      Provider<FirebaseUsersDbRepository> firebaseUsersDbRepositoryProvider) {
    this.firebaseUsersDbRepositoryProvider = firebaseUsersDbRepositoryProvider;
  }

  @Override
  public AuthUserUseCase get() {
    return provideAuthUserUseCase(firebaseUsersDbRepositoryProvider.get());
  }

  public static FirebaseUsersDbModule_ProvideAuthUserUseCaseFactory create(
      Provider<FirebaseUsersDbRepository> firebaseUsersDbRepositoryProvider) {
    return new FirebaseUsersDbModule_ProvideAuthUserUseCaseFactory(firebaseUsersDbRepositoryProvider);
  }

  public static AuthUserUseCase provideAuthUserUseCase(
      FirebaseUsersDbRepository firebaseUsersDbRepository) {
    return Preconditions.checkNotNullFromProvides(FirebaseUsersDbModule.INSTANCE.provideAuthUserUseCase(firebaseUsersDbRepository));
  }
}
